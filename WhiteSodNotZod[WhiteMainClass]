//AUTHOR: Joe White
//COURSE: CPT187
//PURPOSE: Calculate and display detailed information of a store's order.
//STARTDATE: 2/17/2021

package edu.cpt187.white.exercise6;

import java.util.Scanner;

public class WhiteMainClass 
{
	//Constants
	final static char[] MENU_CHARS = {'A', 'B', 'Q'};
	final static String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	final static char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	final static String[] FILE_MENU_OPTIONS = {"Load Inventory","Create Order","Quit"};
	final static char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	final static String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	final static String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args) 
	{
		//Scanner Creation
		Scanner input = new Scanner(System.in);

		//Creates an instance of Inventory.
		Inventory currentInventory = new Inventory();
		//Creates an instance of Order.
		Order currentOrder = new Order();
		//Creates an instance of WriteOrder.
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		//Creates an instance of UserAccounts
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//Variables
		String userName = "";
		char menuSelection = ' ';

		//Welcome Banner
		displayWelcomeBanner();

		//Assignments

		//Main menu
		menuSelection = validateMainMenu(input);

		//While menuSelection is not Q continue to error message or selected menus.
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);

			//If (menuSelection != 'A') create an account
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);

				//If (currentUser.getSearchedIndex() >= 0) display the account results
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//End of if (currentUser.getSearchedIndex() >= 0)

				//Otherwise ask for a password and write the username and password to file then get the account results.
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					getAccountResults();
				}//End of most recent else
			}//End of if (menuSelection != 'A')

			//Otherwise login
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));

				//If (currentUser.getSearchedIndex() < 0) display a login error.
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//End of if (currentUser.getSearchedIndex() < 0)

				//Otherwise proceed to the FileSelection menu
				else
				{
					//FileSelection menu
					menuSelection = validateFileSelection(input);

					//While menuSelection != 'R' proceed to selected option.
					while (menuSelection != 'R')
					{

						//Processes
						//If menuSelection is A enter the file.
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));

							//If getRecordCount is less than or equal to zero display the file was not opened message.
							if (currentInventory.getRecordCount() <=0)
							{
								displayFileError();

							}//End of if (currentInventory.getRecordCount() <=0)

							//Otherwise display the record report
							else
							{
								displayRecordReport(currentInventory.getRecordCount());

							}//End of most recent else
						}//End of if (menuSelection == 'A')

						//Otherwise display the search value prompt.
						else
						{

							currentInventory.setSearchIndex(validateSearchValue(input));

							//If the itemSearchIndex is less than zero display the not found prompt
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();

							}//End of if (currentInventory.getItemSearchIndex() < 0)

							//Otherwise Assign itemName and itemPrice and display the howMany prompt.
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));

								//If howMany is greater than the amount of an item in stock display the out of stock prompt.
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//End of if (currentOrder.getInStockCounts(currentInventory.getInStockCounts()) < currentOrder.getHowMany())

								//Otherwise head to the discount menu.
								else
								{
									//DiscountMenu
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);

									//Prize is randomly selected.
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									//If the discount rate is greater than zero display the overloaded Order Report.
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of if (currentOrder.getDiscountRate() > 0.0)

									//Otherwise display the regular Order Report.
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of most recent else
								}//End of else @143
							}//End of else @129
						}//End of else @115
						menuSelection = validateFileSelection(input);
					}//while (menuSelection != 'R')
				}//End of else@84
			}//End of else @73
			//Updates LVC for while (menuSelection != 'Q')
			menuSelection = validateMainMenu(input);
		}//End of while (menuSelection != 'Q')

		//Load items from masterInventoryFile
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		//If the total cost of the current order is greater than 0 display the final report.
		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End of if (currentOrder.getTotalCost() > 0.0)

		//Farewell Message
		displayFarewellMessage();

		//Closes Scanner
		input.close();

	}//End of main method
	//Voids

	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Hello and welcome to Sod's Sod! I will ");
		System.out.println("let you select your order and calculate detailed");
		System.out.println("information for you and anyone else.");
		System.out.println("There's also a special prize today for every order!");
	}//End of displayWelcomeBanner method

	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you for shopping with us.");
		System.out.println("Goodbye.");
	}//End of displayFarewellMessage method

	//Main Menu
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("===========================================================");
		System.out.println("Main Menu");

		//while localIndex is less than MENU_OPTIONS.length display the menu options and increment localIndex.
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-4s%-15s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of while (localIndex < MENU_OPTIONS.length)
		System.out.println("===========================================================");
		System.out.print("Enter your selection here:");
	}//End of displayMainMenu method

	//Main Menu
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("===========================================================");
		System.out.println("File menu");

		//while localIndex is less than FILE_MENU_OPTIONS.length display the menu options and increment localIndex.
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-4s%-15s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of while (localIndex < FILE_MENU_OPTIONS.length)
		System.out.println("===========================================================");
		System.out.print("Enter your selection here:");
	}//End of displayMainMenu method

	//Discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;

		System.out.println("===========================================================");
		System.out.println("Discount Menu");

		//While localIndex is less than the length of borrowedDiscountNames display the menu options and increment localIndex.
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-4s%-4s%-20s%8.1f%-2s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100,"%");
			localIndex++;
		}//End of while (localIndex < borrowedDiscountNames.length)

		System.out.println("===========================================================");
		System.out.print("Enter your selection here:");
	}//End of displayDiscountMenu method

	//Account Results display
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("===========================================================");
		System.out.println("ACCOUNT RESULTS");
		System.out.print("Account not created: username, ");
		System.out.print(borrowedUserName);
		System.out.println(", already exists");
	}//End of displayAccountResults method

	//Login Error message
	public static void displayLoginError()
	{
		System.out.println("===========================================================");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
	}//End of displayLoginError method

	//Account Results display
	public static void getAccountResults()
	{
		System.out.println("===========================================================");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
	}//ENd of getAccountResults method

	//Outputs
	//Inventory Loaded message
	public static void displayInventoryLoaded()
	{
		System.out.println("===========================================================");
		System.out.println("INVENTORY LOADED REPORT");
		System.out.println("Inventory in-stock counts have been processed");

	}//End of displayInventoryLoaded method

	//Out of Stock message
	public static void displayOutOfStock()
	{
		System.out.println("===========================================================");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
	}//End of displayOutOfStock report

	//File Error message
	public static void displayFileError()
	{
		System.out.println("===========================================================");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
	}//End of displayNotOpen method

	//Not Found Error message
	public static void displayNotFound()
	{
		System.out.println("===========================================================");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
	}//End of displayNotFound method

	//Record Report message
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("===========================================================");
		System.out.println("RECORD REPORT");
		System.out.printf("%20d%20s\n", borrowedRecordCount, "records processed");
	}//End of displayRecordReport

	//Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("===========================================================");
		System.out.println("Order Report");
		System.out.println("===========================================================");
		System.out.printf("%-20s%-30s\n", "Customer Name:", borrowedUserName);
		System.out.println("");
		System.out.printf("%-20s%10s\n","Item Name:", borrowedItemName);
		System.out.printf("%-20s%1s%8.2f\n","Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-18s%8d\n","Quantity:", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-20s%1s%8.2f\n", "Subtotal:","$", borrowedSubTotal);
		System.out.printf("%-20s%8.1f%-1s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.println("");
		System.out.printf("%-20s%1s%8.2f\n","Order Total","$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-20s%-12s\n","Prize:", borrowedPrizeName);
		System.out.println("");
		System.out.print("Buy more now: Only ");
		System.out.print(borrowedInStockCounts);
		System.out.print(" ");
		System.out.print(borrowedItemName);
		System.out.println("s left in-stock");
	}//End of displayOrderReport

	//Overloaded Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("===========================================================");
		System.out.println("Order Report");
		System.out.println("===========================================================");
		System.out.printf("%-20s%-30s\n", "Customer Name:", borrowedUserName);
		System.out.println("");
		System.out.printf("%-20s%10s\n","Item Name:", borrowedItemName);
		System.out.printf("%-20s%1s%8.2f\n","Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-20s%-10s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-20s%8s%-1s\n", "Discount Rate:", borrowedDiscountRate * 100,"%");
		System.out.printf("%-20s%1s%8.2f\n", "Discount Amount:", "$",borrowedDiscountAmt);
		System.out.printf("%-20s%1s%8.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-18s%8d\n","Quantity:", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-20s%1s%8.2f\n", "Subtotal:","$", borrowedSubTotal);
		System.out.printf("%-20s%8.1f%-1s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-20s%1s%8.2f\n", "Tax Amount:", "$", borrowedTax);
		System.out.println("");
		System.out.printf("%-20s%1s%8.2f\n","Order Total","$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-20s%-12s\n","Prize:", borrowedPrizeName);
		System.out.println("");
		System.out.print("Buy more now: Only ");
		System.out.print(borrowedInStockCounts);
		System.out.print(" ");
		System.out.print(borrowedItemName);
		System.out.println("s left in-stock");

	}//End of displayOrderReport method


	//Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;

		System.out.println("===========================================================");
		System.out.println("Final Report");
		System.out.println("===========================================================");
		System.out.printf("%-4s%-23s%-6s%-8s%-6s\n", "ID", "NAME", "PRICE", "QTY","TOTAL");

		//while (localIndex < borrowedRecordCount) display the main output and increment localIndex.
		while (localIndex < borrowedRecordCount)
		{
			System.out.printf("%-4d%-23s%-1s%-6.2f%-7d%1s%-8.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}

		System.out.println("GRAND TOTAL");
		System.out.printf("%1s%-8.2f\n", "$", borrowedGrandTotal);
		System.out.println("===========================================================");
	}//End of displayFinalReport method

	//VRs

	//Assignments
	//Requests userName and sends it back to main.
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";

		System.out.println("===========================================================");
		System.out.print("Enter your username:");
		localUserName = borrowedInput.next();

		return localUserName;
	}//End of getUserName method

	//Requests password and sends it back to main
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";

		System.out.println("===========================================================");
		System.out.print("Enter your password:");
		localPassword = borrowedInput.next();

		return localPassword;
	}//End of getPassword method

	//Requests an input for main menu and sends it back to main.
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';

		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//While localSelection isn't 'A', 'B', or 'Q' print an error message and redisplay the menu.
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			System.out.println("Error, that input is invalid please try again.");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of while (localSelection != 'A' && localSelection != 'Q')
		return localSelection;
	}//End of validateMainMenu

	//Requests an input for file menu and sends it back to main
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';

		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//While localSelection is not 'A', 'B', or 'R' print an error message and redisplay the menu
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			System.out.println("Error, that input is invalid please try again.");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')

		return localSelection;
	}//End of validateFileSelection method

	//Requests fileName and returns it
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";

		System.out.println("===========================================================");
		System.out.println("Enter the file name with extension (i.e. file.txt):");
		localFileName = borrowedInput.next();
		return localFileName;
	}//End of getFileName method

	//Requests howMany and returns it as String.
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;

		System.out.println("===========================================================");
		System.out.print("With a number, how many of that item are you buying?:");
		localHowMany = borrowedInput.nextInt();

		//While localHowMany is less than or equal to zero display an error message and another prompt.
		while (localHowMany <= 0)
		{
			System.out.println("===========================================================");
			System.out.println("Error, that input is invalid please try again.");

			System.out.println("===========================================================");
			System.out.print("With a number, how many of that item are you buying?:");
			localHowMany = borrowedInput.nextInt();
		}//End of while (localHowMany <= 0)

		return String.valueOf(localHowMany);
	}//End of validateHowMany method

	//Requests the search value and returns it.
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;

		System.out.println("===========================================================");
		System.out.print("Enter the search value:");
		localSearchValue = borrowedInput.nextInt();

		//While localSearchValue is less than 0 display an error message and a new prompt.
		while (localSearchValue < 0)
		{
			System.out.println("===========================================================");
			System.out.println("Error, please input a number");
			System.out.println("===========================================================");
			System.out.print("Enter the search value:");
			localSearchValue = borrowedInput.nextInt();
		}//End of while (localSearchValue < 0)

		return localSearchValue;
	}//End of validateSearchValue method

	//Requests an input for the Discount Menu and sends it back to main.
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';

		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//While localSelection is not 'A', 'B', or 'C' display an error message and another menu.
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("Error, that input is invalid please try again.");

			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		return localSelection;
	}//End of validateDiscountMenu
}//End of Main Class
